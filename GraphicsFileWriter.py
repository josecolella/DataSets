#!/usr/bin.python3
"""
This module provides the models that will allow for the conversion
of the visualization models that are projected in the client with the
dc.js library to R using ggplot2 and python using matplotlib
"""


from abc import ABCMeta, abstractmethod
import json
import matplotlib

class AbstractGraphicsFileWriter(metaclass=ABCMeta):

    graphsTypes = (
        'barPlot',
        'boxPlot',
        'histogram',
        'linePlot',
        'piePlot',
        'scatter',
        'stackedArea'
    )

    def __init__(self, data, xAxis, yAxis, chartType):
        """
        Parameters
        -----------------------------------
        data: json encoded data that is to be visualized
        xAxis: The name of the xAxis
        yAxis: The name of the yAxis
        type: The type related to the type of visualization model
        """
        self.data = json.loads(data)
        self.xAxis = xAxis
        self.yAxis = yAxis
        if chartType in AbstractGraphicsFileWriter.graphsTypes:
            self.chartType = chartType

    @abstractmethod
    def _initializeFileContent(self):
        pass

    @abstractmethod
    def write(self):
        pass

    @abstractmethod
    def _addScatterPlot(self):
        pass

    @abstractmethod
    def _addLinePlot(self):
        pass

    @abstractmethod
    def _addBarPlot(self):
        pass

    @abstractmethod
    def _addHistogram(self):
        pass

    @abstractmethod
    def _addBoxPlot(self):
        pass

    @abstractmethod
    def _addPiePlot(self):
        pass

    # @abstractmethod
    # def _addStackedPlot(self):
    #     pass


class RGraphicsFileWriter(AbstractGraphicsFileWriter):
    """
    This class writes to a file the ggplot2 representation
    of the visualization model that is being shown in the client
    """

    def __init__(self, data, xAxis, yAxis, chartType):
        """
        """
        AbstractGraphicsFileWriter.__init__(self, data, xAxis, yAxis, chartType)
        self.filename = None
        self.fileContent = None
        self._initializeFileContent()

    def write(self):
        """
        """
        if self.filename is not None:
            with open('{}.R'.format(self.filename), 'w') as f:
                f.write(self.fileContent)
        else:
            raise Exception('filename can\' be None')

    def _initializeFileContent(self):
        self.fileContent = """#Script generated by visualize platform
install.packages("ggplot2") # The graphing library
install.packages("gcookbook") #Decorating graphs
install.packages("xlsx") # To process excel files
install.packages("gdata") # To process older excel files


library(ggplot2) # The graphing library
library(gcookbook)
library(xlsx) # To process excel files
library(gdata) # To process older excel files
        """

    def _addScatterPlot(self):
        self.fileContent += """# A scatter plot with labels
qplot(data$Year, data$Number.of.Crimes) + geom_text(aes(label=data$Number.of.Crimes),vjust=-0.2)

        """

    def _addLinePlot(self):
        self.fileContent += """# A line plot
qplot(data$Year, data$Number.of.Crimes, geom=c("line")) + geom_text(aes(label=data$Number.of.Crimes), vjust=-0.2)
        """

    def _addBarPlot(self):
        self.fileContent += """# A bar plot
qplot(data$Year, data$Number.of.Crimes, geom="bar", stat="identity") + geom_text(aes(label=data$Number.of.Crimes), vjust=-0.2)"""

    def _addHistogram(self):
        self.fileContent += """# A histogram
qplot(data$Year)
        """

    def _addBoxPlot(self):
        self.fileContent += """# A Box plot
qplot(data2$Women, data2$Men, geom="boxplot")
"""

    def _addPiePlot(self):
        self.fileContent += """# A pie plot
pie(data$Number.of.Crimes, labels=c(data$Year))
"""

    def _addStackedPlot(self):
        pass


class PythonGraphicsFileWriter(AbstractGraphicsFileWriter):
    """
    docstring for PythonGraphicsFileWriter
    """

    def __init__(self, data, xAxis, yAxis, chartType):
        super.__init__(self, data, xAxis, yAxis, chartType)

    def write(self):
        pass


